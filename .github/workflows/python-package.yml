name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test with pytest
      run: |
        pytest

  # Build Docker Image for Flask App
    - name: Build Docker Image for Flask App
      run: |
        docker build -t software-engineering-devops-project .

  # Run Flask App in Docker with volume mapping
    - name: Run Flask App in Docker
      run: | 
        docker run -d -p 5000:5000 --name software-engineering-devops-project -v $(pwd)/app/instance:/app/instance software-engineering-devops-project

  # Check if Docker container is running
    - name: Check if Docker container is running
      run: |
        docker ps

  # Inspect Docker container logs
    - name: Inspect Docker container logs
      run: |
        docker logs software-engineering-devops-project

  # Verify templates directory inside Docker container
    - name: Verify templates directory inside Docker container
      run: |
        docker exec software-engineering-devops-project ls /app/templates
        docker exec software-engineering-devops-project ls /app/static

  # Deploy to Render
    - name: Deploy to Render
      run: |
          echo "Deploying to Render..."
          JSON_PAYLOAD='{"clearCache": false}'  # Corrected JSON format
          echo "$JSON_PAYLOAD" | jq .  # Debug: Check if JSON is valid
          curl -X POST "https://api.render.com/v1/services/srv-custb03qf0us739otqog/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD"
          echo "Deployment triggered successfully"

  # OWASP ZAP - Automated Security Scanning
    - name: Set up OWASP ZAP container
      run: |
        echo "Pulling ZAP container..."
        docker pull zaproxy/zap-stable
        echo "ZAP container pulled successfully"

    - name: Run ZAP Security Scan
      run: |
          echo "Running ZAP security scan..."
          docker run -u root --rm -v $(pwd):/zap/wrk:rw zaproxy/zap-stable bash -c "
            chmod -R 777 /zap/wrk &&
            zap-full-scan.py -t https://software-engineering-devops-project.onrender.com -r zap-report.html -z \"-config failOnWarnings=false\" || true
          "
          echo "ZAP scan completed"
      env:
        ZAP_API_KEY: ${{ secrets.ZAP_API_KEY }}

  # Optional: Save the ZAP report as an artifact
    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report-${{ matrix.python-version }}  # Unique name with Python version
        path: zap-report.html
